C:\Program Files (x86)\MSBuild\Microsoft.Cpp\v4.0\V140\Microsoft.CppBuild.targets(392,5): warning MSB8028: The intermediate directory (Debug\) contains files shared from another project (AdventOfCode.vcxproj).  This can lead to incorrect clean and rebuild behavior.
  Challenge1.cpp
c:\users\xteln\documents\visual studio 2015\projects\adventofcode2016\adventofcode\challenge1.cpp(75): warning C4101: 'dirTotal': unreferenced local variable
c:\users\xteln\documents\visual studio 2015\projects\adventofcode2016\adventofcode\challenge1.cpp(74): warning C4101: 'dirMult': unreferenced local variable
c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility(145): warning C4800: 'int': forcing value to bool 'true' or 'false' (performance warning)
  c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0(655): note: see reference to function template instantiation 'std::pair<const _Kty,_Ty>::pair<std::string&,int,void>(_Other1,_Other2 &&) noexcept(false)' being compiled
          with
          [
              _Kty=std::string,
              _Ty=bool,
              _Other1=std::string &,
              _Other2=int
          ]
  c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0(655): note: see reference to function template instantiation 'std::pair<const _Kty,_Ty>::pair<std::string&,int,void>(_Other1,_Other2 &&) noexcept(false)' being compiled
          with
          [
              _Kty=std::string,
              _Ty=bool,
              _Other1=std::string &,
              _Other2=int
          ]
  c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0(773): note: see reference to function template instantiation 'void std::allocator<_Other>::construct<_Objty,std::string&,_Ty>(_Objty *,std::string &,_Ty &&)' being compiled
          with
          [
              _Other=std::_List_node<std::pair<const std::string,bool>,void *>,
              _Objty=std::pair<const std::string,bool>,
              _Ty=int
          ]
  c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0(773): note: see reference to function template instantiation 'void std::allocator<_Other>::construct<_Objty,std::string&,_Ty>(_Objty *,std::string &,_Ty &&)' being compiled
          with
          [
              _Other=std::_List_node<std::pair<const std::string,bool>,void *>,
              _Objty=std::pair<const std::string,bool>,
              _Ty=int
          ]
  c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0(918): note: see reference to function template instantiation 'void std::allocator_traits<_Alloc>::construct<_Ty,std::string&,int>(std::allocator<_Other> &,_Objty *,std::string &,int &&)' being compiled
          with
          [
              _Alloc=std::allocator<std::_List_node<std::pair<const std::string,bool>,void *>>,
              _Ty=std::pair<const std::string,bool>,
              _Other=std::_List_node<std::pair<const std::string,bool>,void *>,
              _Objty=std::pair<const std::string,bool>
          ]
  c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0(917): note: see reference to function template instantiation 'void std::allocator_traits<_Alloc>::construct<_Ty,std::string&,int>(std::allocator<_Other> &,_Objty *,std::string &,int &&)' being compiled
          with
          [
              _Alloc=std::allocator<std::_List_node<std::pair<const std::string,bool>,void *>>,
              _Ty=std::pair<const std::string,bool>,
              _Other=std::_List_node<std::pair<const std::string,bool>,void *>,
              _Objty=std::pair<const std::string,bool>
          ]
  c:\program files (x86)\microsoft visual studio 14.0\vc\include\list(834): note: see reference to function template instantiation 'void std::_Wrap_alloc<std::allocator<_Other>>::construct<_Ty,std::string&,int>(_Ty *,std::string &,int &&)' being compiled
          with
          [
              _Other=std::_List_node<std::pair<const std::string,bool>,void *>,
              _Ty=std::pair<const std::string,bool>
          ]
  c:\program files (x86)\microsoft visual studio 14.0\vc\include\list(832): note: see reference to function template instantiation 'void std::_Wrap_alloc<std::allocator<_Other>>::construct<_Ty,std::string&,int>(_Ty *,std::string &,int &&)' being compiled
          with
          [
              _Other=std::_List_node<std::pair<const std::string,bool>,void *>,
              _Ty=std::pair<const std::string,bool>
          ]
  c:\program files (x86)\microsoft visual studio 14.0\vc\include\list(1062): note: see reference to function template instantiation 'std::_List_node<std::pair<const _Kty,_Ty>,void *> *std::_List_buy<std::pair<const _Kty,_Ty>,_Alloc>::_Buynode<std::string&,int>(std::_List_node<std::pair<const _Kty,_Ty>,void *> *,std::_List_node<std::pair<const _Kty,_Ty>,void *> *,std::string &,int &&)' being compiled
          with
          [
              _Kty=std::string,
              _Ty=bool,
              _Alloc=std::allocator<std::pair<const std::string,bool>>
          ]
  c:\program files (x86)\microsoft visual studio 14.0\vc\include\list(1061): note: see reference to function template instantiation 'std::_List_node<std::pair<const _Kty,_Ty>,void *> *std::_List_buy<std::pair<const _Kty,_Ty>,_Alloc>::_Buynode<std::string&,int>(std::_List_node<std::pair<const _Kty,_Ty>,void *> *,std::_List_node<std::pair<const _Kty,_Ty>,void *> *,std::string &,int &&)' being compiled
          with
          [
              _Kty=std::string,
              _Ty=bool,
              _Alloc=std::allocator<std::pair<const std::string,bool>>
          ]
  c:\program files (x86)\microsoft visual studio 14.0\vc\include\list(1034): note: see reference to function template instantiation 'void std::list<std::pair<const _Kty,_Ty>,std::allocator<std::pair<const _Kty,_Ty>>>::_Insert<std::string&,int>(std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const _Kty,_Ty>>>,std::_Iterator_base0>,std::string &,int &&)' being compiled
          with
          [
              _Kty=std::string,
              _Ty=bool
          ]
  c:\program files (x86)\microsoft visual studio 14.0\vc\include\list(1034): note: see reference to function template instantiation 'void std::list<std::pair<const _Kty,_Ty>,std::allocator<std::pair<const _Kty,_Ty>>>::_Insert<std::string&,int>(std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const _Kty,_Ty>>>,std::_Iterator_base0>,std::string &,int &&)' being compiled
          with
          [
              _Kty=std::string,
              _Ty=bool
          ]
  c:\program files (x86)\microsoft visual studio 14.0\vc\include\xhash(270): note: see reference to function template instantiation 'void std::list<std::pair<const _Kty,_Ty>,std::allocator<std::pair<const _Kty,_Ty>>>::emplace_front<std::string&,int>(std::string &,int &&)' being compiled
          with
          [
              _Kty=std::string,
              _Ty=bool
          ]
  c:\program files (x86)\microsoft visual studio 14.0\vc\include\xhash(270): note: see reference to function template instantiation 'void std::list<std::pair<const _Kty,_Ty>,std::allocator<std::pair<const _Kty,_Ty>>>::emplace_front<std::string&,int>(std::string &,int &&)' being compiled
          with
          [
              _Kty=std::string,
              _Ty=bool
          ]
  c:\users\xteln\documents\visual studio 2015\projects\adventofcode2016\adventofcode\challenge1.cpp(90): note: see reference to function template instantiation 'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const _Kty,_Ty>>>>,bool> std::_Hash<std::_Umap_traits<_Kty,_Ty,std::_Uhash_compare<_Kty,_Hasher,_Keyeq>,_Alloc,false>>::emplace<std::string&,int>(std::string &,int &&)' being compiled
          with
          [
              _Kty=std::string,
              _Ty=bool,
              _Hasher=std::hash<std::string>,
              _Keyeq=std::equal_to<std::string>,
              _Alloc=std::allocator<std::pair<const std::string,bool>>
          ]
  c:\users\xteln\documents\visual studio 2015\projects\adventofcode2016\adventofcode\challenge1.cpp(90): note: see reference to function template instantiation 'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const _Kty,_Ty>>>>,bool> std::_Hash<std::_Umap_traits<_Kty,_Ty,std::_Uhash_compare<_Kty,_Hasher,_Keyeq>,_Alloc,false>>::emplace<std::string&,int>(std::string &,int &&)' being compiled
          with
          [
              _Kty=std::string,
              _Ty=bool,
              _Hasher=std::hash<std::string>,
              _Keyeq=std::equal_to<std::string>,
              _Alloc=std::allocator<std::pair<const std::string,bool>>
          ]
  AdventOfCode.vcxproj -> C:\Users\xteln\Documents\Visual Studio 2015\Projects\AdventOfCode2016\Debug\Challenge1.exe
